<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AboutHeader.Header" xml:space="preserve">
    <value>关于</value>
  </data>
  <data name="AboutTb.Text" xml:space="preserve">
    <value>本程序为WPF-Regex UWP版</value>
  </data>
  <data name="ContentLabel.Text" xml:space="preserve">
    <value>正文：</value>
  </data>
  <data name="CopySuccess" xml:space="preserve">
    <value>已复制到粘贴板！</value>
  </data>
  <data name="DragTip" xml:space="preserve">
    <value>拖放此处即可添加文件 o(^▽^)o</value>
  </data>
  <data name="HelpDialog.PrimaryButtonText" xml:space="preserve">
    <value>确认</value>
  </data>
  <data name="HelpDialog.SecondaryButtonText" xml:space="preserve">
    <value>取消</value>
  </data>
  <data name="HelpDialog.Title" xml:space="preserve">
    <value>帮助</value>
  </data>
  <data name="HelpLabel.Text" xml:space="preserve">
    <value>
    1. {} 直接输出 默认为 0， 可以 int   可以用 . 连接使用第二级的内容

    2. for 语句
    {for} 或 {~} 开始标志 
        for 无参数时，表示循环输出全部
        for:n 一个参数时，表示从0 开始 共输出 n 个
        for:m, 第二个参数缺省时，表示从m 开始，输出后面所有的
        for:m,n 两个参数时，表示从 m 开始，共输出 n 个
    循环体 {} 只能是 int 或 标签 ，不再支持 . 连接，暂不支持 for 循环
    {end} 或 {!} 结束标志

    3.整数循环
          {1 2 ... 7}  开始标志
          {1 ... 7}  从1循环到7 即输出 1 2 3 4 5 6 7
          {1,3 ... 7} 从1循环到7 每个数隔2 , 即 1 3 5 7
          {16:1 2 ... 15} 从1循环到15的十六进制 即输出 1 2 ... F
    4. 数组循环
        {aa,bb,cc} 开始标志

    {}           取值标志
    {end} 或者 {!} 结束标志
    整数循环 和 数组循环 中循环体 {1} 这种方式取值表示全局的值
    
    4.{m~n} 输出 m到n 的随机数
    
    5. 新增驼峰与下划线转换
        {studly:}    “ ”、“_”、“-” 为分割符，包括首字母转大写成驼峰写法例如 aa_aa 转成 AaAa

        {lstudly:}   首字母为小写的驼峰写法 例如 aa_aa 转成 aaAa
        
        {unstudly:}  驼峰写法转下划线 例如 AaAa 转成 aa_aa
    </value>
  </data>
  <data name="HelpLink.Content" xml:space="preserve">
    <value>查看更多帮助</value>
  </data>
  <data name="MatchHeader.Header" xml:space="preserve">
    <value>匹配结果</value>
  </data>
  <data name="MatchLabel.Text" xml:space="preserve">
    <value>提取列表：</value>
  </data>
  <data name="RegexError" xml:space="preserve">
    <value>您的正则表达式有错误！</value>
  </data>
  <data name="RegexLabel.Text" xml:space="preserve">
    <value>正则表达式：</value>
  </data>
  <data name="ReplaceLabel.Text" xml:space="preserve">
    <value>输出的文字：</value>
  </data>
  <data name="ResultDialog.PrimaryButtonText" xml:space="preserve">
    <value>复制</value>
  </data>
  <data name="ResultDialog.SecondaryButtonText" xml:space="preserve">
    <value>取消</value>
  </data>
  <data name="ResultDialog.Title" xml:space="preserve">
    <value>是否复制文字</value>
  </data>
  <data name="StartBtn.Content" xml:space="preserve">
    <value>开始</value>
  </data>
  <data name="TemplateHeader.Header" xml:space="preserve">
    <value>输出模板</value>
  </data>
</root>