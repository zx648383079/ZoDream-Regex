<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AboutHeader.Header" xml:space="preserve">
    <value>About</value>
  </data>
  <data name="AboutTb.Text" xml:space="preserve">
    <value>This program is WPF-Regex UWP version</value>
  </data>
  <data name="ContentLabel.Text" xml:space="preserve">
    <value>text:</value>
  </data>
  <data name="CopySuccess" xml:space="preserve">
    <value>Copy to the pasteboard!</value>
  </data>
  <data name="DragTip" xml:space="preserve">
    <value>Drag and drop here to add files o(^▽^)o</value>
  </data>
  <data name="MatchHeader.Header" xml:space="preserve">
    <value>Match result</value>
  </data>
  <data name="MatchLabel.Text" xml:space="preserve">
    <value>Extract the list:</value>
  </data>
  <data name="RegexError" xml:space="preserve">
    <value>There is an error in your regular expression!</value>
  </data>
  <data name="RegexLabel.Text" xml:space="preserve">
    <value>Regular expression:</value>
  </data>
  <data name="ReplaceLabel.Text" xml:space="preserve">
    <value>Output text:</value>
  </data>
  <data name="ResultDialog.PrimaryButtonText" xml:space="preserve">
    <value>Copy</value>
  </data>
  <data name="ResultDialog.SecondaryButtonText" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="ResultDialog.Title" xml:space="preserve">
    <value>Whether to copy text</value>
  </data>
  <data name="StartBtn.Content" xml:space="preserve">
    <value>Start</value>
  </data>
  <data name="TemplateHeader.Header" xml:space="preserve">
    <value>Output template</value>
  </data>
  <data name="HelpDialog.PrimaryButtonText" xml:space="preserve">
    <value>OK</value>
  </data>
  <data name="HelpDialog.SecondaryButtonText" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="HelpDialog.Title" xml:space="preserve">
    <value>Help</value>
  </data>
  <data name="HelpLabel.Text" xml:space="preserve">
    <value>
    1. {} Direct output defaults to 0, and int can be used. Connect to use the second level content

     2. The for statement
     {for} or {~} start flag
         for when there is no parameter, it means loop output all
         for:n When a parameter is used, it means to output n total from 0
         for:m, When the second parameter defaults, it means to start from m and output all the following
         for:m,n with two parameters, it means to start from m and output n total
     The loop body {} can only be an int or a label, and it no longer supports. Connection. For loops are not currently supported
     {end} or {!} end flag

     3. Integer loop
           {1 2 ... 7} Start mark
           {1 ... 7} Circulate from 1 to 7 and output 1 2 3 4 5 6 7
           {1,3 ... 7} Circulate from 1 to 7 and each number is separated by 2, which is 1 3 5 7
           {16:1 2 ... 15} The hexadecimal number cycled from 1 to 15 is output 1 2 ... F
    
     {} Value flag
     {end} or {!} end tag
    
     4.{m~n} Output random numbers from m to n
     
     5. Added hump and underscore conversion
         {studly:} " ", "_", "-" are separators, including the first letter to uppercase into camel case, for example, aa_aa into AaAa

         {lstudly:} Camel case with the first letter in lowercase. For example, aa_aa is converted to aaAa
        
         {unstudly:} The wording of camel case is converted to underscore, for example, AaAa is converted to aa_aa</value>
  </data>
  <data name="HelpLink.Content" xml:space="preserve">
    <value>See more help</value>
  </data>
</root>